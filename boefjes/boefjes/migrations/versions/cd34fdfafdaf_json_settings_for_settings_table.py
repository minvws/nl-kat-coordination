"""Json settings for settings table

Revision ID: cd34fdfafdaf
Revises: 197672984df0
Create Date: 2023-02-16 14:47:20.424959

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "cd34fdfafdaf"
down_revision = "197672984df0"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "settings",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("values", sa.JSON(), nullable=False),
        sa.Column("plugin_id", sa.String(length=64), nullable=False),
        sa.Column("organisation_pk", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["organisation_pk"], ["organisation.pk"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("organisation_pk", "plugin_id", name="unique_settings_per_organisation_per_plugin"),
    )

    conn = op.get_bind()

    # Seed the original data into the new table
    conn.execute(
        "INSERT INTO settings (values, plugin_id, organisation_pk) SELECT json_object_agg(key, value) "
        "AS values, plugin_id, organisation_pk FROM setting GROUP BY organisation_pk, plugin_id;"
    )

    op.drop_table("setting")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "setting",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("key", sa.VARCHAR(length=128), autoincrement=False, nullable=False),
        sa.Column("value", sa.VARCHAR(length=128), autoincrement=False, nullable=False),
        sa.Column("organisation_pk", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("plugin_id", sa.VARCHAR(length=64), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["organisation_pk"], ["organisation.pk"], name="setting_organisation_pk_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="setting_pkey"),
        sa.UniqueConstraint("key", "organisation_pk", "plugin_id", name="unique_keys_per_organisation_per_plugin"),
    )

    conn = op.get_bind()

    # Seed the original data into the new table
    conn.execute(
        "INSERT INTO setting (key, value, organisation_pk, plugin_id) SELECT json_data.key AS key, json_data.value "
        "AS value, organisation_pk, plugin_id from settings, json_each_text(settings.values) AS json_data;"
    )

    op.drop_table("settings")
    # ### end Alembic commands ###
