"""Introduce BoefjeConfig model

Revision ID: f9de6eb7824b
Revises: 6f99834a4a5a
Create Date: 2024-05-31 10:45:16.474714

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.orm import sessionmaker

from boefjes.local_repository import get_local_repository
from boefjes.sql.plugin_storage import create_plugin_storage

# revision identifiers, used by Alembic.
revision = "f9de6eb7824b"
down_revision = "6f99834a4a5a"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "boefje_config",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("settings", sa.String(length=512), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False, default=False),
        sa.Column("boefje_id", sa.Integer(), nullable=False),
        sa.Column("organisation_pk", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["boefje_id"], ["boefje.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["organisation_pk"], ["organisation.pk"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("organisation_pk", "boefje_id", name="unique_boefje_config_per_organisation_per_boefje"),
    )

    local_plugins = {plugin.id: plugin for plugin in get_local_repository().get_all()}
    connection = op.get_bind()
    session = sessionmaker(bind=connection)()

    with create_plugin_storage(session) as storage:
        for plugin_id_output in op.get_bind().execute("SELECT DISTINCT plugin_id FROM settings").fetchall():
            plugin_id = plugin_id_output[0]
            if plugin_id not in local_plugins:
                raise ValueError(f"Invalid plugin id found: {plugin_id}")

            # Since settings are boefje-only at this moment
            if local_plugins[plugin_id].type != "boefje":
                raise ValueError(f"Settings for normalizer or bit found: {plugin_id}. Remove these entries first.")

            storage.create_boefje(local_plugins[plugin_id])  # type: ignore

    with connection.begin():
        connection.execute("""
            INSERT INTO boefje_config (settings, boefje_id, enabled, organisation_pk)
            SELECT s.values, b.id, false, s.organisation_pk from settings s
            join boefje b on s.plugin_id = b.plugin_id
        """)

    op.drop_table("settings")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "settings",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("values", sa.VARCHAR(length=512), autoincrement=False, nullable=False),
        sa.Column("plugin_id", sa.VARCHAR(length=64), autoincrement=False, nullable=False),
        sa.Column("organisation_pk", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["organisation_pk"], ["organisation.pk"], name="settings_organisation_pk_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="settings_pkey"),
        sa.UniqueConstraint("organisation_pk", "plugin_id", name="unique_settings_per_organisation_per_plugin"),
    )

    connection = op.get_bind()
    with connection.begin():
        connection.execute("""
            INSERT INTO settings (values, plugin_id, organisation_pk)
            SELECT bc.settings, b.id, bc.organisation_pk from boefje_config bc
            join boefje b on bc.boefje_id = b.id
        """)

    op.drop_table("boefje_config")
    # ### end Alembic commands ###
