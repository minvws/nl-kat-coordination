from unittest import TestCase

from boefjes.plugins.kat_cve_2023_35078.normalize import VULNERABLE_RANGES, are_vulnerable_versions
from packaging import version


class CVE_2023_35078Test(TestCase):
    maxDiff = None

    def test_vulnerable_version_11_8(self):
        detected_versions = [version.parse("11.8.0.0")]
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertTrue(are_vulnerable_versions(vulnerable_ranges, detected_versions))

    def test_vulnerable_version_11_9(self):
        detected_versions = [version.parse("11.9.1.0")]
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertTrue(are_vulnerable_versions(vulnerable_ranges, detected_versions))

    def test_vulnerable_version_11_10(self):
        detected_versions = [version.parse("11.10.0.1")]
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertTrue(are_vulnerable_versions(vulnerable_ranges, detected_versions))

    def test_patched_version_11_9(self):
        detected_versions = [version.parse("11.9.2.0")]
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertFalse(are_vulnerable_versions(vulnerable_ranges, detected_versions))

    def test_equal_to_patched_version_11_9(self):
        detected_versions = [version.parse("11.9.1.1")]
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertFalse(are_vulnerable_versions(vulnerable_ranges, detected_versions))
