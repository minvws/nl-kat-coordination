from unittest import TestCase
from unittest.mock import MagicMock

from boefjes.plugins.kat_cve_2023_35078.normalize import VULNERABLE_RANGES, is_vulnerable_version, run
from packaging import version
from tests.loading import get_dummy_data


class CVE_2023_35078Test(TestCase):
    maxDiff = None

    def test_vulnerable_version_11_8(self):
        detected_version = version.parse("11.8.0.0")
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertTrue(is_vulnerable_version(vulnerable_ranges, detected_version))

    def test_vulnerable_version_11_9(self):
        detected_version = version.parse("11.9.1.0")
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertTrue(is_vulnerable_version(vulnerable_ranges, detected_version))

    def test_vulnerable_version_11_10(self):
        detected_version = version.parse("11.10.0.1")
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertTrue(is_vulnerable_version(vulnerable_ranges, detected_version))

    def test_patched_version_11_9(self):
        detected_version = version.parse("11.9.2.0")
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertFalse(is_vulnerable_version(vulnerable_ranges, detected_version))

    def test_equal_to_patched_version_11_9(self):
        detected_version = version.parse("11.9.1.1")
        vulnerable_ranges = [(version.parse(start), version.parse(end)) for start, end in VULNERABLE_RANGES]
        self.assertFalse(is_vulnerable_version(vulnerable_ranges, detected_version))


def test_cve_2023_35078_vulnerable():
    oois = set(run(MagicMock(), get_dummy_data("cve_2023_35078_vulnerable.html")))

    assert any(ooi.object_type == "Finding" for ooi in oois)


def test_cve_2023_35078_not_vulnerable():
    oois = set(run(MagicMock(), get_dummy_data("cve_2023_35078_not_vulnerable.html")))

    assert not any(ooi.object_type == "Finding" for ooi in oois)
