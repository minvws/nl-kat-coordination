services:
  rabbitmq:
    restart: unless-stopped
    image: "docker.io/library/rabbitmq:3.12-management"
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      retries: 10
    env_file:
      - .env-defaults
      - .env

  postgres:
    restart: unless-stopped
    image: docker.io/library/postgres:15
    shm_size: 256MB
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD", "gosu", "postgres", "pg_isready"]
      interval: 10s
      retries: 10
    # Django runserver does not limit the number of threads. We need to increase
    # the maximum number of connection to make sure that we don't hit the limit.
    command: -c max_connections=500
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    env_file:
      - .env-defaults
      - .env
    environment:
      APPS: "ROCKY BYTES KATALOGUS SCHEDULER"

  crux:
    image: "ghcr.io/dekkers/xtdb-http-multinode:main"
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - xtdb-data:/var/lib/xtdb

  octopoes_api:
    restart: unless-stopped
    depends_on:
      crux:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    ports:
      - "127.0.0.1:8001:80"
    build:
      context: octopoes/
      target: dev
      args:
        ENVIRONMENT: dev
    command: uvicorn octopoes.api.api:app --host 0.0.0.0 --port 80 --reload --reload-dir /app/octopoes/octopoes
    env_file:
      - .env-defaults
      - .env
    volumes:
      - ./octopoes:/app/octopoes

  octopoes_api_worker:
    restart: unless-stopped
    depends_on:
      crux:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    build:
      context: octopoes/
      target: dev
      args:
        ENVIRONMENT: dev
    command: worker-beat
    env_file:
      - .env-defaults
      - .env
    volumes:
      - ./octopoes:/app/octopoes
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  boefje:
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - bytes
    ports:
      - "127.0.0.1:8006:8000"
    build:
      context: .
      dockerfile: boefjes/Dockerfile
      target: dev
      args:
        ENVIRONMENT: dev
    volumes:
      - ./boefjes:/app/boefjes
      - ./octopoes/octopoes:/app/boefjes/octopoes
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
    command: boefje
    env_file:
      - .env-defaults
      - .env
    environment:
      - BOEFJES_DOCKER_NETWORK=${COMPOSE_PROJECT_NAME:-nl-kat-coordination}_default

  normalizer:
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - bytes
    build:
      context: .
      dockerfile: boefjes/Dockerfile
      target: dev
      args:
        ENVIRONMENT: dev
    volumes:
      - ./boefjes:/app/boefjes
      - ./octopoes/octopoes:/app/boefjes/octopoes
    deploy:
      replicas: 1
    command: normalizer
    env_file:
      - .env-defaults
      - .env

  rocky:
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "127.0.0.1:8000:8000"
    build:
      context: .
      dockerfile: rocky/Dockerfile
      target: dev
      args:
        ENVIRONMENT: dev
    command: python3 manage.py runserver 0.0.0.0:8000
    volumes:
      - ./rocky:/app/rocky
      - ./octopoes/octopoes:/app/rocky/octopoes
    env_file:
      - .env-defaults
      - .env
    environment:
      - GITPOD_WORKSPACE_URL=${GITPOD_WORKSPACE_URL:-}
      - GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN=${GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN:-}

  rocky_worker:
    restart: unless-stopped
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: rocky/Dockerfile
      target: dev
      args:
        ENVIRONMENT: dev
    command: worker
    volumes:
      - ./rocky:/app/rocky
      - ./octopoes/octopoes:/app/rocky/octopoes
    env_file:
      - .env-defaults
      - .env
    environment:
      - GITPOD_WORKSPACE_URL=${GITPOD_WORKSPACE_URL:-}
      - GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN=${GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN:-}

  bytes:
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "127.0.0.1:8002:8000"
    build:
      context: bytes/
      target: dev
      args:
        ENVIRONMENT: dev
    command: uvicorn bytes.api:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/bytes/bytes
    volumes:
      - ./bytes:/app/bytes
      - bytes-data:/data
    env_file:
      - .env-defaults
      - .env

  katalogus:
    restart: unless-stopped
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: boefjes/Dockerfile
      target: dev
      args:
        ENVIRONMENT: dev
    command: uvicorn boefjes.katalogus.root:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/boefjes/boefjes/katalogus
    volumes:
      - ./boefjes:/app/boefjes
      - ./octopoes/octopoes:/app/boefjes/octopoes
    ports:
      - "127.0.0.1:8003:8000"
    env_file:
      - .env-defaults
      - .env

  scheduler:
    restart: unless-stopped
    build:
      context: mula/
      target: dev
      args:
        ENVIRONMENT: dev
    ports:
      - "127.0.0.1:8004:8000"
    env_file:
      - .env-defaults
      - .env
    volumes:
      - ./mula:/app/scheduler
    depends_on:
      - postgres
      - rabbitmq
      - boefje
      - normalizer
      - octopoes_api
      - katalogus

  jaeger:
    profiles:
      - monitoring
    restart: unless-stopped
    image: docker.io/jaegertracing/jaeger:2.4.0
    volumes:
      - ./monitoring/jaeger.yml:/etc/jaeger/config.yml
    command: ["--config", "/etc/jaeger/config.yml"]
    ports:
      - "16686:16686"
      - "8888:8888"
      - "8889:8889"
      - "4317:4317"
      - "4318:4318"

  prometheus:
    profiles:
      - monitoring
    restart: unless-stopped
    image: docker.io/prom/prometheus:v3.2.1
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  pyroscope:
    profiles:
      - monitoring
    image: docker.io/grafana/pyroscope:1.13.2
    ports:
      - 4040:4040

  alloy:
    profiles:
      - monitoring
    image: docker.io/grafana/alloy:v1.7.5
    user: root
    privileged: true
    pid: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./monitoring/config.alloy:/config.alloy
    ports:
      - 12345:12345
    command:
      - run
      - /config.alloy
      - --storage.path=/tmp/alloy
      - --server.http.listen-addr=0.0.0.0:12345

  grafana:
    profiles:
      - monitoring
    image: grafana/grafana:11.6.0
    environment:
      - GF_INSTALL_PLUGINS=grafana-pyroscope-app
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
    ports:
      - 4000:3000

networks:
  default:
    enable_ipv6: true
    ipam:
      config:
        - subnet: fc42:ca7::/64
        - subnet: 172.30.0.0/16
          gateway: 172.30.0.1

volumes:
  postgres-data:
  bytes-data:
  xtdb-data:
  jaeger-data:
  prometheus-data:
