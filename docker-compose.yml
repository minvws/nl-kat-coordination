version: "3.9"

services:
  rabbitmq:
    restart: unless-stopped
    image: "rabbitmq:3.11-management"
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      retries: 10
    env_file:
      - .env

  postgres:
    restart: unless-stopped
    image: postgres:15
    shm_size: 256MB
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD", "gosu", "postgres", "pg_isready"]
      interval: 10s
      retries: 10
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    env_file:
      - .env
    environment:
      APPS: "ROCKY BYTES KATALOGUS SCHEDULER"

  crux:
    image: "ghcr.io/dekkers/xtdb-http-multinode:main"
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - xtdb-data:/var/lib/xtdb

  octopoes_api:
    restart: unless-stopped
    depends_on:
      crux:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    ports:
      - "127.0.0.1:8001:80"
    build:
      context: octopoes/
      target: dev
      args:
        ENVIRONMENT: dev
    command: uvicorn octopoes.api.api:app --host 0.0.0.0 --port 80 --reload --reload-dir /app/octopoes/octopoes
    env_file:
      - .env
    volumes:
      - ./octopoes:/app/octopoes

  octopoes_api_worker:
    restart: unless-stopped
    depends_on:
      crux:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    build:
      context: octopoes/
      target: dev
      args:
        ENVIRONMENT: dev
    command: worker-beat
    env_file:
      - .env
    volumes:
      - ./octopoes:/app/octopoes

  boefje:
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - bytes
    build:
      context: .
      dockerfile: boefjes/Dockerfile
      target: dev
      args:
        ENVIRONMENT: dev
    volumes:
      - ./boefjes:/app/boefjes
      - ./octopoes/octopoes:/app/boefjes/octopoes
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
    command: boefje
    env_file:
      - .env

  normalizer:
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - bytes
    build:
      context: .
      dockerfile: boefjes/Dockerfile
      target: dev
      args:
        ENVIRONMENT: dev
    volumes:
      - ./boefjes:/app/boefjes
      - ./octopoes/octopoes:/app/boefjes/octopoes
    deploy:
      replicas: 1
    command: normalizer
    env_file:
      - .env

  rocky:
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "127.0.0.1:8000:80"
    build:
      context: .
      dockerfile: rocky/Dockerfile
      target: dev
      args:
        ENVIRONMENT: dev
    command: python3 manage.py runserver 0.0.0.0:80
    volumes:
      - ./rocky:/app/rocky
      - ./octopoes/octopoes:/app/rocky/octopoes
    env_file:
      - .env
    environment:
      - GITPOD_WORKSPACE_URL=${GITPOD_WORKSPACE_URL:-}
      - GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN=${GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN:-}

  bytes:
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "127.0.0.1:8002:8000"
    build:
      context: bytes/
      target: dev
      args:
        ENVIRONMENT: dev
    command: uvicorn bytes.api:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/bytes/bytes
    volumes:
      - ./bytes:/app/bytes
      - bytes-data:/data
    env_file:
      - .env

  katalogus:
    restart: unless-stopped
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: boefjes/Dockerfile
      target: dev
      args:
        ENVIRONMENT: dev
    command: uvicorn boefjes.katalogus.api:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/boefjes/boefjes/katalogus
    volumes:
      - ./boefjes:/app/boefjes
      - ./octopoes/octopoes:/app/boefjes/octopoes
    ports:
      - "127.0.0.1:8003:8000"
    env_file:
      - .env

  scheduler:
    restart: unless-stopped
    build:
      context: mula/
      target: dev
      args:
        ENVIRONMENT: dev
    ports:
      - "127.0.0.1:8004:8000"
    env_file:
      - .env
    volumes:
      - ./mula:/app/scheduler
    depends_on:
      - postgres
      - rabbitmq
      - boefje
      - normalizer
      - octopoes_api
      - katalogus

  keiko:
    restart: unless-stopped
    build:
      context: keiko/
      target: dev
    ports:
      - "127.0.0.1:8005:8000"
    command: uvicorn keiko.app:api --host 0.0.0.0 --port 8000 --reload --reload-dir /app/keiko/keiko
    env_file:
      - .env
    volumes:
      - ./keiko:/app/keiko
      - keiko-reports:/reports

  jaeger:
    profiles:
    - jaeger
    restart: unless-stopped
    image: jaegertracing/all-in-one:1.44
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "127.0.0.1:16686:16686"

volumes:
  postgres-data:
  bytes-data:
  keiko-reports:
  xtdb-data:
