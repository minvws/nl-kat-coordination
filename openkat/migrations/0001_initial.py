# Generated by Django 5.2.6 on 2025-09-18 21:57

import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import tagulous.models.fields
import tagulous.models.models
from django.conf import settings
from django.db import migrations, models

import openkat.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [("auth", "0012_alter_user_first_name_max_length")]

    operations = [
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="The name of the organisation", max_length=126, unique=True)),
                (
                    "code",
                    openkat.models.LowerCaseSlugField(
                        allow_unicode=True,
                        help_text="A slug containing only lower-case unicode letters, numbers, hyphens or underscores that will be used in URLs and paths",
                        max_length=32,
                        unique=True,
                    ),
                ),
            ],
            options={
                "permissions": (
                    ("can_switch_organization", "Can switch organization"),
                    ("can_scan_organization", "Can scan organization"),
                    ("can_set_clearance_level", "Can set clearance level"),
                    ("can_access_all_organizations", "Can access all organizations"),
                    ("can_enable_disable_schedule", "Can enable or disable schedules"),
                )
            },
        ),
        migrations.CreateModel(
            name="KATUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("id", models.AutoField(primary_key=True, serialize=False, verbose_name="ID")),
                ("full_name", models.CharField(max_length=150, verbose_name="full name")),
                ("email", openkat.models.LowerCaseEmailField(max_length=254, unique=True, verbose_name="email")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                (
                    "clearance_level",
                    models.IntegerField(
                        default=-1,
                        help_text="The clearance level of the user for all organizations.",
                        validators=[
                            django.core.validators.MinValueValidator(-1),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Indemnification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="openkat.organization"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationTag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("slug", models.SlugField()),
                (
                    "count",
                    models.IntegerField(default=0, help_text="Internal counter of how many times this tag is in use"),
                ),
                (
                    "protected",
                    models.BooleanField(default=False, help_text="Will not be deleted when the count reaches 0"),
                ),
                ("path", models.TextField()),
                ("label", models.CharField(help_text="The name of the tag, without ancestors", max_length=255)),
                ("level", models.IntegerField(default=1, help_text="The level of the tag in the tree")),
                (
                    "color",
                    models.CharField(
                        choices=[
                            ("color-1-light", "Blue light"),
                            ("color-1-medium", "Blue medium"),
                            ("color-1-dark", "Blue dark"),
                            ("color-2-light", "Green light"),
                            ("color-2-medium", "Green medium"),
                            ("color-2-dark", "Green dark"),
                            ("color-3-light", "Yellow light"),
                            ("color-3-medium", "Yellow medium"),
                            ("color-3-dark", "Yellow dark"),
                            ("color-4-light", "Orange light"),
                            ("color-4-medium", "Orange medium"),
                            ("color-4-dark", "Orange dark"),
                            ("color-5-light", "Red light"),
                            ("color-5-medium", "Red medium"),
                            ("color-5-dark", "Red dark"),
                            ("color-6-light", "Violet light"),
                            ("color-6-medium", "Violet medium"),
                            ("color-6-dark", "Violet dark"),
                        ],
                        default="color-1-light",
                        max_length=20,
                    ),
                ),
                (
                    "border_type",
                    models.CharField(
                        choices=[("plain", "Plain"), ("solid", "Solid"), ("dashed", "Dashed"), ("dotted", "Dotted")],
                        default="plain",
                        max_length=20,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="openkat.organizationtag",
                    ),
                ),
            ],
            options={"ordering": ("name",), "abstract": False, "unique_together": {("slug", "parent")}},
            bases=(tagulous.models.models.BaseTagTreeModel, models.Model),
        ),
        migrations.AddField(
            model_name="organization",
            name="tags",
            field=tagulous.models.fields.TagField(
                _set_tag_meta=True,
                blank=True,
                force_lowercase=True,
                help_text="Enter a comma-separated tag string",
                protect_all=True,
                to="openkat.organizationtag",
                tree=True,
            ),
        ),
        migrations.CreateModel(
            name="AuthToken",
            fields=[
                ("digest", models.CharField(max_length=128, primary_key=True, serialize=False)),
                ("token_key", models.CharField(db_index=True, max_length=25)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("expiry", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=150, verbose_name="name")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="auth_token_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        models.F("user"), django.db.models.functions.text.Lower("name"), name="unique name"
                    )
                ]
            },
        ),
        migrations.CreateModel(
            name="OrganizationMember",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(choices=[("active", "active"), ("new", "new")], default="new", max_length=64),
                ),
                ("blocked", models.BooleanField(default=False)),
                ("onboarded", models.BooleanField(default=False)),
                (
                    "trusted_clearance_level",
                    models.IntegerField(
                        default=-1,
                        validators=[
                            django.core.validators.MinValueValidator(-1),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                (
                    "acknowledged_clearance_level",
                    models.IntegerField(
                        default=-1,
                        validators=[
                            django.core.validators.MinValueValidator(-1),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                ("groups", models.ManyToManyField(blank=True, to="auth.group")),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="members", to="openkat.organization"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="members", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={"unique_together": {("user", "organization")}},
        ),
    ]
