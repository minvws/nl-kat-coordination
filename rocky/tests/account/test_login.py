from django.contrib.auth.middleware import AuthenticationMiddleware
from django.contrib.sessions.middleware import SessionMiddleware
from django.test import Client

from pytest_django.asserts import assertContains, assertNotContains

from account.views import LoginRockyView


def test_login_view(rf, superuser_member):
    request = rf.get("login")

    request = SessionMiddleware(lambda r: r)(request)
    request = AuthenticationMiddleware(lambda r: r)(request)

    response = LoginRockyView.as_view()(request, superuser_member.user)
    assert response.status_code == 200
    assertContains(response, "Login")
    assertContains(response, "Email")
    assertContains(response, "Password")
    assertContains(response, "csrfmiddlewaretoken")


def test_login(rf, superuser_member):
    client = Client()

    response = client.post(
        "/account/login/",
        {"auth-username": "wrong@openkat.nl", "auth-password": "TestTest123!!", "login_view-current_step": "auth"},
    )

    assert response.status_code == 200
    assertNotContains(response, "Explanation:")
    assertContains(response, "Login")
    assertContains(response, "Error")
    assertContains(response, "Please enter a correct email and password.")

    response = client.post(
        "/account/login/",
        {"auth-username": "admin@openkat.nl", "auth-password": "Test!!", "login_view-current_step": "auth"},
    )

    assert response.status_code == 200
    assertNotContains(response, "Explanation:")
    assertContains(response, "Login")
    assertContains(response, "Error")
    assertContains(response, "Please enter a correct email and password.")

    response = client.post(
        "/account/login/",
        {
            "auth-username": "superuser@openkat.nl",
            "auth-password": "SuperSuper123!!",
            "login_view-current_step": "auth",
        },
    )

    assert response.status_code == 200

    assertContains(response, "Explanation:")
    assertContains(response, "Login")
    assertContains(response, "Please enter the token generated by your token generator.")
    assertContains(response, "Submit")

    response = client.post(
        "/account/login/",
        {"token-otp_token": "123456", "login_view-current_step": "token"},
    )

    assert response.status_code == 200

    assert not client.login(email="wrong@openkat.nl", password="TestTest123!!")
    assert not client.login(email="admin@openkat.nl", password="Test!!")
    assert client.login(email="superuser@openkat.nl", password="SuperSuper123!!")
